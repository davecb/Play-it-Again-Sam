#!/bin/sh
#
# perf2seconds -- read a perf log and do 1-second samples
#	format yyy-mm-dd hh:mm:ss latency  xfertime thinktime bytes url rc op offered
#	2025-02-21 06:55:20.567   0.000788 0.001388 0
#   bytes url                                          rc  op offered
#	8478 download/00034915-a2bd-4280-8356-b1f009881fc5 200 GET 1
#
ProgName=`basename $0`

main() {
	name=$1

	if [ $# -lt 1 ]; then
		say "$ProgName error: you must supply a text file"
		say "Usage: $0 file.log"
		exit 1
	fi
	if [ "$name" = "-" ]; then
		# use stdin
		name=""
	fi

	cat $name |\
	# this admittedly looks wierd, use --debug to see what it does
	sort -k 2.1,2.2nb -k 2.5,2.6nb -k2.8,2.12nb \
		--temporary-directory=/var/tmp  |\
	awk '
	NR == 1 {
		# get initial value for time
		# this looks for leading comments
		if ($1 == "#yyy-mm-dd") {
			getline
		}
		date = $1
		sub("\\.[0-9]*", "", $2)
		time = $2

		# print headers
		print "#date time latency xfertime thinktime bytes requests errors"
	}
	/^#/ { next } # Do not count any embedded comments
	/.*/ {
		# print ">>> " $0
		sub("\\.[0-9]*", "", $2)
		if (time != $2) {
			# A new second has started
			report(date, time, latency, xfertime, thinktime,
				bytes, requests, errors)
			date = $1
			time = $2
			latency = $3
			xfertime = $4
			thinktime = $5
			bytes = $6
			requests = 0
			errors = 0
		}
		else {
			latency += $3
			xfertime += $4
			thinktime += $5
			bytes += $6
			requests++
			if ($8 != 200) {
				# printf("#8 = '%d'\n", $8)
				errors++
				errorsTotal++
				if ($8+0 == 404) {
					# keep this and errorsTotal until the end
					errors404++
				}
			}
			# Transactions are (requests - errors)
		}
	}
	END {
		report(date, time, latency, xfertime, thinktime, bytes, requests, errors)
		printf("%d of the %d total errors are 404s\n", errors404, errorsTotal) > "/dev/stderr"
	}

	# report -- print non-empty seconds.
	#	WARNING: gawk demands a non-K&R brace style, or it reports an undefined function.
	# 	Take the average of all the _non_ error requests
	function report(date, time, latency, xfertime, thinktime, bytes, requests, errors)
	{
		if (requests > 0 || errors > 0) {
			# note: by requests/second, not by TPS
			printf("%s %s %f %f %f %d %d %d\n",
				date, time, latency/requests, xfertime/requests,
				thinktime/requests, bytes/requests, requests, errors)
		}
	}
'
}

say() {
	echo "$@" 1>&2
}

main "$@"
